import fs from "fs";
import path from "path";
import { pipeline } from "stream/promises";
import axios from "axios";
// import os from 'os';
const OUTPUT_DIR = '/tmp';

// ‚úÖ H√†m tr√≠ch xu·∫•t videoId t·ª´ URL YouTube
function extractVideoId(videoUrl) {
  try {
    const urlObj = new URL(videoUrl);
    let videoId = urlObj.searchParams.get("v");
    if (!videoId) {
      // X·ª≠ l√Ω cho link d·∫°ng r√∫t g·ªçn (youtu.be)
      videoId = urlObj.pathname.split("/").pop();
    }
    return videoId;
  } catch (error) {
    console.error("‚ùå L·ªói khi tr√≠ch xu·∫•t videoId:", error);
    return null;
  }
}

// ‚úÖ H√†m t·∫£i audio (MP3) t·ª´ YouTube qua RapidAPI
async function downloadAudio(videoUrl) {
  try {
    console.log("üì• ƒêang l·∫•y th√¥ng tin video t·ª´ YouTube qua RapidAPI...");

    const videoId = extractVideoId(videoUrl);
    if (!videoId) {
      throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t videoId t·ª´ URL.");
    }

    const rapidApiOptions = {
      method: "GET",
      url: "https://youtube-mp36.p.rapidapi.com/dl",
      params: { id: videoId },
      headers: {
        "x-rapidapi-key": "f5e1f04522msh10562b05d31776bp16145djsnf23c78ea2636", // Thay th·∫ø b·∫±ng RapidAPI key c·ªßa b·∫°n
        "x-rapidapi-host": "youtube-mp36.p.rapidapi.com"
      }
    };

    let response;
    response = await axios.request(rapidApiOptions);
    console.log("response.data====")
    console.log(response.data)
    while (response.data.status === 'processing') {
      console.log("===================")
      response = await axios.request(rapidApiOptions);

    }

    // console.log({response})
    if (response.data.status !== "ok") {
      console.error("‚ùå L·ªói API RapidAPI:", response.data.msg);
      return null;
    }

    console.log("‚úÖ Metadata video:", response.data.title);

    // L·∫•y link t·∫£i file MP3 t·ª´ ph·∫£n h·ªìi c·ªßa API
    const downloadLink = response.data.link;
    // const filePath = path.join(OUTPUT_DIR, `temp_audio_${Date.now()}.mp3`);

    // console.log("üì• ƒêang t·∫£i file MP3 t·ª´ link:", downloadLink);
    // const fileResponse = await axios.get(downloadLink);
    // const writer = fs.createWriteStream(filePath, { highWaterMark: 1024 * 1024 * 8 });
    // await pipeline(fileResponse.data, writer);

    // console.log("‚úÖ File ƒë√£ t·∫£i v·ªÅ:", filePath);
    const filePath = await downloadFileFromUrl(downloadLink)
    // console.log(response.data)

    const trans = await getTranscript(filePath)
    return { videoId, title: response.data.title, duration: response.data.duration, data: trans };
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i audio t·ª´ YouTube:", error);
    return null;
  }
}

export async function getYoutubeVideoInfo(videoUrl) {
  try {
    console.log("üì• ƒêang l·∫•y th√¥ng tin video t·ª´ YouTube qua RapidAPI...");

    const videoId = extractVideoId(videoUrl);
    if (!videoId) {
      throw new Error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t videoId t·ª´ URL.");
    }

    const rapidApiOptions = {
      method: "GET",
      url: "https://youtube-mp36.p.rapidapi.com/dl",
      params: { id: videoId },
      headers: {
        "x-rapidapi-key": "f5e1f04522msh10562b05d31776bp16145djsnf23c78ea2636", // Thay th·∫ø b·∫±ng RapidAPI key c·ªßa b·∫°n
        "x-rapidapi-host": "youtube-mp36.p.rapidapi.com"
      }
    };

    let response;
    response = await axios.request(rapidApiOptions);
    console.log("response.data====")
    console.log(response.data)
    return response.data
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin t·ª´ YouTube:", error);
    return null;
  }
}

// ‚úÖ H√†m ch√≠nh ƒë·ªÉ l·∫•y th√¥ng tin MP3 t·ª´ YouTube s·ª≠ d·ª•ng RapidAPI
export async function getMP3Info(videoUrl) {
  try {
    console.log("üìå B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video...");
    const audioData = await downloadAudio(videoUrl);
    if (!audioData) throw new Error("Kh√¥ng th·ªÉ t·∫£i audio t·ª´ video!");
    console.log("‚úÖ X·ª≠ l√Ω ho√†n th√†nh!");
    return audioData;
  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:", error);
    return null;
  }
}

// ‚úÖ H√†m t·∫£i file t·ª´ URL (d√†nh cho file MP3 t·∫£i t·ª´ YouTube)
export async function downloadFileFromUrl(url) {
  try {
    console.log("üì• ƒêang t·∫£i file t·ª´ URL:", url);

    const filePath = `${OUTPUT_DIR}/temp_audio_${Date.now()}.mp3`;

    const response = await axios({
      method: "GET",
      url: url,
      responseType: "stream", // D√πng stream ƒë·ªÉ t·∫£i file
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)", // Gi·∫£ l·∫≠p tr√¨nh duy·ªát
        "Accept": "*/*", // Cho ph√©p t·∫£i m·ªçi lo·∫°i d·ªØ li·ªáu
      },
      maxRedirects: 5, // Cho ph√©p Axios theo d√µi t·ªëi ƒëa 5 l·∫ßn chuy·ªÉn h∆∞·ªõng
    });

    if (response.status !== 200) {
      throw new Error(`L·ªói t·∫£i file: Server ph·∫£n h·ªìi ${response.status} ${response.statusText}`);
    }

    console.log("üì§ ƒêang ghi file...");
    const writer = fs.createWriteStream(filePath, { highWaterMark: 1024 * 1024 * 16 });
    await pipeline(response.data, writer);

    console.log("‚úÖ File ƒë√£ t·∫£i v·ªÅ:", filePath);
    return filePath;
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫£i file t·ª´ URL:", error.response ? error.response.data : error.message);
    return null;
  }
}

// ‚úÖ H√†m x√≥a file sau khi x·ª≠ l√Ω
export function deleteFile(filePath) {
  if (fs.existsSync(filePath)) {
    fs.unlinkSync(filePath);
    console.log("üóë ƒê√£ x√≥a file:", filePath);
  } else {
    console.log("‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i:", filePath);
  }
}

// H√†m t√°ch ytVideoId t·ª´ URL YouTube
export const extractYouTubeId = (url) => {
  const regex = /(?:youtu\.be\/|youtube\.com\/(?:.*v=|.*\/|.*vi\/|.*embed\/))([\w-]{11})/;
  const match = url.match(regex);
  return match ? match[1] : null;
};


import FormData from 'form-data';

export const sendAudioToDeepgram = async (filePath) => {
  try {
    const formData = new FormData();
    // formData.append('file', fs.createReadStream(filePath));
    const audioStream = fs.createReadStream(filePath);
    const response = await axios.post(
     'https://api.deepgram.com/v1/listen?smart_format=true&paragraphs=true&utterances=true&utt_split=0.9&language=ko&model=whisper',
      audioStream,
      {
        headers: {
          ...formData.getHeaders(),
          'Authorization': 'Token 9155204600563f32b848f52356912546ec8dfb41',
        },
      }
    );

    // const newSentences = response.data.results.channels[0].alternatives[0].paragraphs.paragraphs.reduce((acc, current) => {
    //   return acc.concat(current.sentences);
    // }, []);
    const newSentences = response.data.results.utterances;

    // const newWords = response.data.results.channels[0].alternatives[0].words;
    // const sentencesWithWords = newSentences.map((sentence) => {
    //   const sentenceWords = newWords.filter((word) => word.start >= sentence.start && word.end <= sentence.end);
    //   return {
    //     sentence: sentence.text,
    //     start: sentence.start,
    //     end: sentence.end,
    //     words: sentenceWords,
    //   };
    // });

    // return sentencesWithWords;
    return newSentences;
  } catch (error) {
    console.error('Error sending audio to Deepgram: ', error.response ? error.response.data : error.message);
    return []
  }
};

// GEMINI API
import { GoogleGenerativeAI } from "@google/generative-ai";

// Kh·ªüi t·∫°o Gemini API
const genAI = new GoogleGenerativeAI("AIzaSyAD-DPPuCS-rdQjR-qqmrlh6jwF5c7An0Y"); // Thay b·∫±ng API key c·ªßa b·∫°n
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// H√†m l√†m s·∫°ch ph·∫£n h·ªìi t·ª´ Gemini
const cleanResponse = (text) => {
  return text.replace(/```json\n|```|\n/g, "").trim();
};

// H√†m t√°ch c√¢u d√†i th√†nh c√°c c√¢u ng·∫Øn h∆°n d·ª±a tr√™n m·∫£ng words
export const splitLongSentences = async (sentences, maxWords = 12) => {
  const result = [];

  for (const sentence of sentences) {
    const wordCount = sentence.words.length;

    // N·∫øu c√¢u ng·∫Øn h∆°n ng∆∞·ª°ng, gi·ªØ nguy√™n
    if (wordCount <= maxWords) {
      result.push(sentence);
      continue;
    }

    // N·∫øu c√¢u qu√° d√†i, g·ª≠i t·ªõi Gemini ƒë·ªÉ t√¨m ƒëi·ªÉm t√°ch
    const wordList = sentence.words.map((word) => word.text).join(" ");
    const prompt = `
      You are a text processing assistant. Given a sentence, suggest how to split it into shorter sentences, each with no more than ${maxWords} words, using only the original words in the exact order, without adding or modifying any words. Return the result as a JSON array of arrays, where each inner array contains the indices of words (from the original word list) that form a shorter sentence. Ensure the split sentences are semantically coherent.

      Sentence: "${wordList}"
      Word list: ${JSON.stringify(sentence.words.map((word) => word.text))}

      Example input: "The quick brown fox jumps over the lazy dog and runs to the forest to hunt for food."
      Example word list: ["The", "quick", "brown", "fox", "jumps", "over", "the", "lazy", "dog", "and", "runs", "to", "the", "forest", "to", "hunt", "for", "food"]
      Example output: [[0, 9], [10, 14], [15, 17]]

      Return only the JSON array of index ranges.
    `;

    try {
      const geminiResult = await model.generateContent(prompt);
      const responseText = cleanResponse(await geminiResult.response.text());
      const splitIndices = JSON.parse(responseText); // M·∫£ng c√°c [startIndex, endIndex]

      // T·∫°o c√°c c√¢u m·ªõi t·ª´ indices
      const newSentences = splitIndices.map(([startIndex, endIndex]) => {
        const newWords = sentence.words.slice(startIndex, endIndex + 1);
        const newText = newWords.map((word) => word.text).join(" ");
        const start = newWords[0].start;
        const end = newWords[newWords.length - 1].end;
        const confidence = newWords.reduce((sum, word) => sum + word.confidence, 0) / newWords.length;

        return {
          text: newText,
          start: Math.round(start),
          end: Math.round(end),
          confidence: Number(confidence.toFixed(2)),
          words: newWords,
        };
      });

      result.push(...newSentences);
    } catch (error) {
      console.error("Error splitting sentence:", sentence.text, error);
      result.push(sentence); // N·∫øu l·ªói, gi·ªØ nguy√™n c√¢u
    }
  }

  return result;
};



// AssemblyAI API

import { AssemblyAI } from 'assemblyai';

const client = new AssemblyAI({
    apiKey: '674d42163f3a448ea246cc6b877a4eac',
});

export const getTranscript = async (audio, language_code = 'ko') => {
    // C·∫•u h√¨nh y√™u c·∫ßu phi√™n √¢m
    const data = {
        language_detection: true,
        audio: audio,
        word_boost: [], // C√≥ th·ªÉ th√™m t·ª´ c·∫ßn ∆∞u ti√™n n·∫øu mu·ªën
        auto_highlights: false // T·∫Øt auto_highlights v√¨ kh√¥ng d√πng
    };

    // G·ª≠i y√™u c·∫ßu phi√™n √¢m
    const transcript = await client.transcripts.transcribe(data);

    // L·∫•y sentences v√† words
    const { sentences } = await client.transcripts.sentences(transcript.id);
    const transcriptDetails = await client.transcripts.get(transcript.id);
    const words = transcriptDetails.words || [];

    // Chia sentences th√†nh c√°c ƒëo·∫°n ng·∫Øn h∆°n
    const maxWordsPerSegment = 8; // T·ªëi ƒëa 8 t·ª´ m·ªói ƒëo·∫°n
    const segments = [];

    for (const sentence of sentences) {
        // L·∫•y c√°c t·ª´ thu·ªôc c√¢u n√†y
        const sentenceWords = words.filter(word => 
            word.start >= sentence.start && word.end <= sentence.end
        );

        // Nh√≥m words th√†nh c√°c ƒëo·∫°n ng·∫Øn
        let currentWords = [];
        for (let i = 0; i < sentenceWords.length; i++) {
            currentWords.push(sentenceWords[i]);
            if (currentWords.length >= maxWordsPerSegment || i === sentenceWords.length - 1) {
                segments.push({
                    start: currentWords[0].start,
                    end: currentWords[currentWords.length - 1].end,
                    text: currentWords.map(word => word.text).join(' ').trim(),
                    words: currentWords
                });
                currentWords = [];
            }
        }
    }

    const dataRes = await splitLongSentences(segments, 10);
    // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng t∆∞∆°ng th√≠ch v·ªõi Flutter
    return dataRes;
};